!function(e){"use strict";function i(e){return this.id="viewer-"+Math.round(Math.random()*Math.pow(10,6)).toString(),this.viewerOpen=!1,this.figure=e,this.scrim=document.getElementsByClassName("scrim")[0],this.lastWindowWidth=window.innerWidth,this.transitionEndEvent=function(){var e,i=document.createElement("fakeelement"),t={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",MSTransition:"msTransitionEnd",OTransition:"otransitionend",transition:"transitionend"};for(e in t)if(t.hasOwnProperty(e)&&void 0!==i.style[e])return t[e]}(),this.forceSmall=0<=this.figure.className.indexOf("force-small"),this.forceMedium=0<=this.figure.className.indexOf("force-medium"),this.forceLarge=0<=this.figure.className.indexOf("force-large"),window.addEventListener("keyup",function(e){27===e.keyCode&&this.closeViewer()}.bind(this)),this.load(),0<=this.figure.className.indexOf("with-viewer")&&this.figure.addEventListener("click",this.openViewer.bind(this)),this}i.prototype.closeViewer=function(){window.removeEventListener("scroll",this.onScroll),window.removeEventListener("resize",this.onShouldCloseViewer),window.removeEventListener("orientationchange",this.onShouldCloseViewer),this.scrim.removeEventListener("click",this.onShouldCloseViewer),this.figure.addEventListener(this.transitionEndEvent,function(){-1==document.body.className.indexOf(this.id)&&(this.viewerOpen=!1,this.figure.className=this.figure.className.replace("is-open","").replace(/^\s+|\s+$/g,""),this.figure.style.zIndex="")}.bind(this)),document.body.className=document.body.className.replace(this.id,"").replace(/^\s+|\s+$/g,""),this.figure.style.transform=""},i.prototype.openViewer=function(){var e,i,t,s,n,o,r,a;0<=document.body.className.indexOf(this.id)?this.closeViewer():(this.viewerOpen=!0,n=window.getComputedStyle(this.figure),e=parseFloat(n.height),i=parseFloat(n.width),t=window.innerHeight,s=window.innerWidth,n=this.figure.getBoundingClientRect(),i/e<=s/t?(r=(s-i*(o=t/e))/2-n.left,a=-1*n.top):(a=(t-e*(o=s/i))/2-n.top,r=-1*n.left),document.body.className+=" "+this.id,this.figure.className+=" is-open",this.figure.style.zIndex="800",this.figure.style.transform="translate3d("+r+"px,"+a+"px,0) scale("+o+")",setTimeout(function(){this.figure.className.indexOf("loaded-raw")<=0&&this.loadRaw()}.bind(this),300),this.onScroll=function(){var e=this.figure.getBoundingClientRect().top;50<Math.abs(e)&&this.closeViewer()}.bind(this),this.onShouldCloseViewer=function(e){this.closeViewer(),e.stopPropagation()}.bind(this),this.scrim.addEventListener("click",this.onShouldCloseViewer),window.addEventListener("resize",this.onShouldCloseViewer),window.addEventListener("orientationchange",this.onShouldCloseViewer),window.addEventListener("scroll",this.onScroll))},i.prototype.load=function(){var e=new Image;e.src=this.figure.dataset[this.getSize()],e.className="full",e.onload=function(){this.figure.className+=" loaded"}.bind(this),this.figure.appendChild(e)},i.prototype.loadRaw=function(){var e=new Image;e.src=this.figure.dataset.raw,e.className="raw",e.onload=function(){this.figure.className+=" loaded-raw"}.bind(this),this.figure.appendChild(e)},i.prototype.getSize=function(){if(this.forceSmall)return"small";if(this.forceMedium)return"medium";if(this.forceLarge)return"large";var e=this.lastWindowWidth<768?0:this.lastWindowWidth<1440?1:2;return 1<window.devicePixelRatio&&e<2&&(e+=1),["small","medium","large"][e]},"function"==typeof define&&define.amd?define(i):"undefined"!=typeof module&&module.exports?module.exports=i:e.ProgressiveImage=i}(this);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
