textBalancer=function(){function t(){for(var e,t=0;t<a.length;t+=1)e=a[t],n(e)&&(e.style.maxWidth="",function e(t,n,r,i){var l;if(i<=r)return void(t.style.maxWidth=i+"px");l=(r+i)/2;t.style.maxWidth=l+"px";t.clientHeight>n?e(t,n,1+l,i):e(t,n,r+1,l)}(e,e.clientHeight,0,e.clientWidth))}var a=[];var n=function(e){var t=e.innerHTML,n=e.innerHTML.split(" "),r=document.createElement("span");return r.id="element-first-word",r.innerHTML=n[0],n=n.slice(1),e.innerHTML="",e.appendChild(r),e.innerHTML+=" "+n.join(" "),n=(r=document.getElementById("element-first-word")).offsetHeight,r=e.offsetHeight,e.innerHTML=t,n<r-10};return{initialize:function(e){e?function(e){selectorArray=e.split(",");for(var t=0;t<selectorArray.length;t+=1){var n=document.querySelectorAll(selectorArray[t].trim());for(var r=0;r<n.length;r+=1){var i=n[r];a.push(i)}}}(e):a=document.querySelectorAll(".balance-text"),t();var r,i,l,o,e=(r=function(){t()},i=100,function(){var e=this,t=arguments,n=l&&!o;clearTimeout(o),o=setTimeout(function(){o=null,l||r.apply(e,t)},i),n&&r.apply(e,t)});window.addEventListener("resize",e)}}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
